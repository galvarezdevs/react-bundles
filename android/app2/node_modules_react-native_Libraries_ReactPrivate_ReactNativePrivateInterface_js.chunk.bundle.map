{"version":3,"file":"node_modules_react-native_Libraries_ReactPrivate_ReactNativePrivateInterface_js.chunk.bundle","mappings":"8QAUAA,E,mEAAAC,CAAAC,EAAA,mEAwBAC,EAAOC,QAlBP,SACEC,EACAC,GAEkB,UAAdA,GACFC,EAAAA,QAAUC,uBACRH,EACAE,EAAAA,QAAUE,eAAeC,wBAAwBC,iBAGnC,UAAdL,GACFC,EAAAA,QAAUC,uBACRH,EACAE,EAAAA,QAAUE,eAAeC,wBAAwBE,gBAGvD,C,0JCtBA,IAAAC,EAAAX,EAAA,mEAWMY,EAAwB,CAK5BC,gBAAe,SAAAC,GAA+D,IACxEC,EADWC,EAAcF,EAAdE,eAAuBC,EAAUH,EAAjBC,MAQ7BA,EAHEE,aAAsBC,MAGfD,EACsB,iBAAfA,EAGP,IAAIE,EAAAA,eAAeF,GAInB,IAAIE,EAAAA,eAAe,qBAE9B,IACEJ,EAAMC,eAAiBA,EACvBD,EAAMK,kBAAmB,CAC3B,CAAE,MAAAC,GAEF,CAQA,OANA,EAAAC,EAAAA,iBAAgBP,GAAO,IAMhB,CACT,GACAb,EAAAA,QAEaU,C,uGCjDf,IAAMW,EAAgBvB,EAAQ,wEAExBwB,EAAkB,CACtBC,SAAQ,SAACC,GACHC,EAAAA,EAAOC,cACTD,EAAAA,EAAOE,0BAA0B,mBAAmB,kBAAMH,CAAY,IAEtEH,EAAcO,uBAAuB,kBAAmBJ,EAE5D,GAGFzB,EAAOC,QAAUsB,C,sGCCjBvB,EAAOC,QAAU,CACf,iBAAIqB,GACF,OAAOvB,EAAQ,uEACjB,EACA,qBAAI+B,GACF,OAAO/B,EAAQ,kEACjB,EACA,YAAIgC,GACF,OAAOhC,EAAQ,sEACjB,EACA,mBAAIwB,GACF,OAAOxB,EAAQ,wEACjB,EACA,iCAAIiC,GACF,OAAOjC,EAAQ,wFACjB,EACA,kBAAIkC,GACF,OAAOlC,EAAQ,+EACjB,EACA,aAAIK,GACF,OAAOL,EAAQ,iEACjB,EACA,cAAImC,GACF,OAAOnC,EAAQ,uEACjB,EACA,qCAAIoC,GAGF,OAAOpC,EAAQ,uFACjB,EACA,gBAAIqC,GACF,OAAOrC,EAAQ,mEACjB,EACA,yBAAIY,GACF,OAAOZ,EAAAA,uEAAAA,OACT,EACA,gCAAIsC,GACF,OAAOtC,EAAQ,6GACjB,E","sources":["webpack:///./node_modules/react-native/Libraries/Components/AccessibilityInfo/legacySendAccessibilityEvent.android.js","webpack:///./node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js","webpack:///./node_modules/react-native/Libraries/EventEmitter/RCTEventEmitter.js","webpack:///./node_modules/react-native/Libraries/ReactPrivate/ReactNativePrivateInterface.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport UIManager from '../../ReactNative/UIManager';\n\n/**\n * This is a function exposed to the React Renderer that can be used by the\n * pre-Fabric renderer to emit accessibility events to pre-Fabric nodes.\n */\nfunction legacySendAccessibilityEvent(\n  reactTag: number,\n  eventType: string,\n): void {\n  if (eventType === 'focus') {\n    UIManager.sendAccessibilityEvent(\n      reactTag,\n      UIManager.getConstants().AccessibilityEventTypes.typeViewFocused,\n    );\n  }\n  if (eventType === 'click') {\n    UIManager.sendAccessibilityEvent(\n      reactTag,\n      UIManager.getConstants().AccessibilityEventTypes.typeViewClicked,\n    );\n  }\n}\n\nmodule.exports = legacySendAccessibilityEvent;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport {handleException, SyntheticError} from './ExceptionsManager';\n\nimport type {ExtendedError} from './ExtendedError';\n\nexport type CapturedError = {\n  +componentStack: string,\n  +error: mixed,\n  +errorBoundary: ?{...},\n  ...\n};\n\nconst ReactFiberErrorDialog = {\n  /**\n   * Intercept lifecycle errors and ensure they are shown with the correct stack\n   * trace within the native redbox component.\n   */\n  showErrorDialog({componentStack, error: errorValue}: CapturedError): boolean {\n    let error: ?ExtendedError;\n\n    // Typically, `errorValue` should be an error. However, other values such as\n    // strings (or even null) are sometimes thrown.\n    if (errorValue instanceof Error) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (errorValue: ExtendedError);\n    } else if (typeof errorValue === 'string') {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError(errorValue): ExtendedError);\n    } else {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError('Unspecified error'): ExtendedError);\n    }\n    try {\n      error.componentStack = componentStack;\n      error.isComponentError = true;\n    } catch {\n      // Ignored.\n    }\n\n    handleException(error, false);\n\n    // Return false here to prevent ReactFiberErrorLogger default behavior of\n    // logging error details to console.error. Calls to console.error are\n    // automatically routed to the native redbox controller, which we've already\n    // done above by calling ExceptionsManager.\n    return false;\n  },\n};\n\nexport default ReactFiberErrorDialog;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst BatchedBridge = require('../BatchedBridge/BatchedBridge');\n\nconst RCTEventEmitter = {\n  register(eventEmitter: any) {\n    if (global.RN$Bridgeless) {\n      global.RN$registerCallableModule('RCTEventEmitter', () => eventEmitter);\n    } else {\n      BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);\n    }\n  },\n};\n\nmodule.exports = RCTEventEmitter;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport typeof BatchedBridge from '../BatchedBridge/BatchedBridge';\nimport typeof ExceptionsManager from '../Core/ExceptionsManager';\nimport typeof Platform from '../Utilities/Platform';\nimport typeof RCTEventEmitter from '../EventEmitter/RCTEventEmitter';\nimport typeof ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport typeof TextInputState from '../Components/TextInput/TextInputState';\nimport typeof UIManager from '../ReactNative/UIManager';\nimport typeof deepDiffer from '../Utilities/differ/deepDiffer';\nimport typeof deepFreezeAndThrowOnMutationInDev from '../Utilities/deepFreezeAndThrowOnMutationInDev';\nimport typeof flattenStyle from '../StyleSheet/flattenStyle';\nimport {type DangerouslyImpreciseStyleProp} from '../StyleSheet/StyleSheet';\nimport typeof ReactFiberErrorDialog from '../Core/ReactFiberErrorDialog';\nimport typeof legacySendAccessibilityEvent from '../Components/AccessibilityInfo/legacySendAccessibilityEvent';\n\n// flowlint unsafe-getters-setters:off\nmodule.exports = {\n  get BatchedBridge(): BatchedBridge {\n    return require('../BatchedBridge/BatchedBridge');\n  },\n  get ExceptionsManager(): ExceptionsManager {\n    return require('../Core/ExceptionsManager');\n  },\n  get Platform(): Platform {\n    return require('../Utilities/Platform');\n  },\n  get RCTEventEmitter(): RCTEventEmitter {\n    return require('../EventEmitter/RCTEventEmitter');\n  },\n  get ReactNativeViewConfigRegistry(): ReactNativeViewConfigRegistry {\n    return require('../Renderer/shims/ReactNativeViewConfigRegistry');\n  },\n  get TextInputState(): TextInputState {\n    return require('../Components/TextInput/TextInputState');\n  },\n  get UIManager(): UIManager {\n    return require('../ReactNative/UIManager');\n  },\n  get deepDiffer(): deepDiffer {\n    return require('../Utilities/differ/deepDiffer');\n  },\n  get deepFreezeAndThrowOnMutationInDev(): deepFreezeAndThrowOnMutationInDev<\n    {...} | Array<mixed>,\n  > {\n    return require('../Utilities/deepFreezeAndThrowOnMutationInDev');\n  },\n  get flattenStyle(): flattenStyle<DangerouslyImpreciseStyleProp> {\n    return require('../StyleSheet/flattenStyle');\n  },\n  get ReactFiberErrorDialog(): ReactFiberErrorDialog {\n    return require('../Core/ReactFiberErrorDialog').default;\n  },\n  get legacySendAccessibilityEvent(): legacySendAccessibilityEvent {\n    return require('../Components/AccessibilityInfo/legacySendAccessibilityEvent');\n  },\n};\n"],"names":["_UIManager","_interopRequireDefault","require","module","exports","reactTag","eventType","UIManager","sendAccessibilityEvent","getConstants","AccessibilityEventTypes","typeViewFocused","typeViewClicked","_ExceptionsManager","ReactFiberErrorDialog","showErrorDialog","_ref","error","componentStack","errorValue","Error","SyntheticError","isComponentError","_unused","handleException","BatchedBridge","RCTEventEmitter","register","eventEmitter","global","RN$Bridgeless","RN$registerCallableModule","registerCallableModule","ExceptionsManager","Platform","ReactNativeViewConfigRegistry","TextInputState","deepDiffer","deepFreezeAndThrowOnMutationInDev","flattenStyle","legacySendAccessibilityEvent"],"sourceRoot":""}