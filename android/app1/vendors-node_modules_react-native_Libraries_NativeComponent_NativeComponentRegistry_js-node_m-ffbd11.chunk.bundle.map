{"version":3,"file":"vendors-node_modules_react-native_Libraries_NativeComponent_NativeComponentRegistry_js-node_m-ffbd11.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js","webpack:///./node_modules/react-native/Libraries/NativeComponent/StaticViewConfigValidator.js","webpack:///./node_modules/react-native/Libraries/NativeComponent/ViewConfig.js","webpack:///./node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js","webpack:///./node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js","webpack:///./node_modules/react-native/Libraries/Utilities/verifyComponentAttributeEquivalence.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as StaticViewConfigValidator from './StaticViewConfigValidator';\nimport {createViewConfig} from './ViewConfig';\nimport UIManager from '../ReactNative/UIManager';\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../Renderer/shims/ReactNativeTypes';\nimport ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\nimport verifyComponentAttributeEquivalence from '../Utilities/verifyComponentAttributeEquivalence';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nlet getRuntimeConfig;\n\nlet componentNameToExists: Map<string, boolean> = new Map();\n\n/**\n * Configures a function that is called to determine whether a given component\n * should be registered using reflection of the native component at runtime.\n *\n * The provider should return null if the native component is unavailable in\n * the current environment.\n */\nexport function setRuntimeConfigProvider(\n  runtimeConfigProvider: (name: string) => ?{\n    native: boolean,\n    strict: boolean,\n    verify: boolean,\n  },\n): void {\n  invariant(\n    getRuntimeConfig == null,\n    'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.',\n  );\n  getRuntimeConfig = runtimeConfigProvider;\n}\n\n/**\n * Gets a `NativeComponent` that can be rendered by React Native.\n *\n * The supplied `viewConfigProvider` may or may not be invoked and utilized,\n * depending on how `setRuntimeConfigProvider` is configured.\n */\nexport function get<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): HostComponent<Config> {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {native, strict, verify} = getRuntimeConfig?.(name) ?? {\n      native: true,\n      strict: false,\n      verify: false,\n    };\n\n    const viewConfig = native\n      ? getNativeComponentAttributes(name)\n      : createViewConfig(viewConfigProvider());\n\n    if (verify) {\n      const nativeViewConfig = native\n        ? viewConfig\n        : getNativeComponentAttributes(name);\n      const staticViewConfig = native\n        ? createViewConfig(viewConfigProvider())\n        : viewConfig;\n\n      if (strict) {\n        const validationOutput = StaticViewConfigValidator.validate(\n          name,\n          nativeViewConfig,\n          staticViewConfig,\n        );\n\n        if (validationOutput.type === 'invalid') {\n          console.error(\n            StaticViewConfigValidator.stringifyValidationResult(\n              name,\n              validationOutput,\n            ),\n          );\n        }\n      } else {\n        verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig);\n      }\n    }\n\n    return viewConfig;\n  });\n\n  // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!\n  return name;\n}\n\n/**\n * Same as `NativeComponentRegistry.get(...)`, except this will check either\n * the `setRuntimeConfigProvider` configuration or use native reflection (slow)\n * to determine whether this native component is available.\n *\n * If the native component is not available, a stub component is returned. Note\n * that the return value of this is not `HostComponent` because the returned\n * component instance is not guaranteed to have native methods.\n */\nexport function getWithFallback_DEPRECATED<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): React.AbstractComponent<Config> {\n  if (getRuntimeConfig == null) {\n    // `getRuntimeConfig == null` when static view configs are disabled\n    // If `setRuntimeConfigProvider` is not configured, use native reflection.\n    if (hasNativeViewConfig(name)) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  } else {\n    // If there is no runtime config, then the native component is unavailable.\n    if (getRuntimeConfig(name) != null) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  }\n\n  const FallbackNativeComponent = function (props: Config): React.Node {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name: string): boolean {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if there is a StaticViewConfig registered for the\n * component name received as a parameter.\n */\nexport function unstable_hasStaticViewConfig(name: string): boolean {\n  const {native} = getRuntimeConfig?.(name) ?? {\n    native: true,\n  };\n  return !native;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport {type ViewConfig} from '../Renderer/shims/ReactNativeTypes';\n// $FlowFixMe[nonstrict-import]\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\n// $FlowFixMe[nonstrict-import]\nimport {createViewConfig} from './ViewConfig';\n\ntype Difference =\n  | {\n      type: 'missing',\n      path: Array<string>,\n      nativeValue: mixed,\n    }\n  | {\n      type: 'unequal',\n      path: Array<string>,\n      nativeValue: mixed,\n      staticValue: mixed,\n    }\n  | {\n      type: 'unexpected',\n      path: Array<string>,\n      staticValue: mixed,\n    };\n\ntype ValidationResult = ValidResult | InvalidResult;\ntype ValidResult = {\n  type: 'valid',\n};\ntype InvalidResult = {\n  type: 'invalid',\n  differences: Array<Difference>,\n};\n\ntype ViewConfigValidationResult = {\n  componentName: string,\n  nativeViewConfig?: ?ViewConfig,\n  staticViewConfig?: ?ViewConfig,\n  validationResult?: ?ValidationResult,\n};\n\n// e.g. require('MyNativeComponent') where MyNativeComponent.js exports a HostComponent\ntype JSModule = $FlowFixMe;\n\nexport function validateStaticViewConfigs(\n  nativeComponent: JSModule,\n): ViewConfigValidationResult {\n  const nativeViewConfig = getNativeComponentAttributes(\n    nativeComponent.default || nativeComponent,\n  );\n\n  const generatedPartialViewConfig = nativeComponent.__INTERNAL_VIEW_CONFIG;\n  const staticViewConfig: ?ViewConfig =\n    generatedPartialViewConfig && createViewConfig(generatedPartialViewConfig);\n\n  const componentName: string = nativeComponent.default || nativeComponent;\n  const validationResult: ?ValidationResult =\n    nativeViewConfig &&\n    staticViewConfig &&\n    validate(componentName, nativeViewConfig, staticViewConfig);\n\n  return {\n    componentName,\n    nativeViewConfig,\n    staticViewConfig,\n    validationResult,\n  };\n}\n\n/**\n * During the migration from native view configs to static view configs, this is\n * used to validate that the two are equivalent.\n */\nexport function validate(\n  name: string,\n  nativeViewConfig: ViewConfig,\n  staticViewConfig: ViewConfig,\n): ValidationResult {\n  const differences = [];\n  accumulateDifferences(\n    differences,\n    [],\n    {\n      bubblingEventTypes: nativeViewConfig.bubblingEventTypes,\n      directEventTypes: nativeViewConfig.directEventTypes,\n      uiViewClassName: nativeViewConfig.uiViewClassName,\n      validAttributes: nativeViewConfig.validAttributes,\n    },\n    {\n      bubblingEventTypes: staticViewConfig.bubblingEventTypes,\n      directEventTypes: staticViewConfig.directEventTypes,\n      uiViewClassName: staticViewConfig.uiViewClassName,\n      validAttributes: staticViewConfig.validAttributes,\n    },\n  );\n\n  if (differences.length === 0) {\n    return {type: 'valid'};\n  }\n\n  return {\n    type: 'invalid',\n    differences,\n  };\n}\n\nexport function stringifyValidationResult(\n  name: string,\n  validationResult: InvalidResult,\n): string {\n  const {differences} = validationResult;\n  return [\n    `StaticViewConfigValidator: Invalid static view config for '${name}'.`,\n    '',\n    ...differences.map(difference => {\n      const {type, path} = difference;\n      switch (type) {\n        case 'missing':\n          return `- '${path.join('.')}' is missing.`;\n        case 'unequal':\n          return `- '${path.join('.')}' is the wrong value.`;\n        case 'unexpected':\n          return `- '${path.join('.')}' is present but not expected to be.`;\n      }\n    }),\n    '',\n  ].join('\\n');\n}\n\nfunction accumulateDifferences(\n  differences: Array<Difference>,\n  path: Array<string>,\n  nativeObject: {...},\n  staticObject: {...},\n): void {\n  for (const nativeKey in nativeObject) {\n    const nativeValue = nativeObject[nativeKey];\n\n    if (!staticObject.hasOwnProperty(nativeKey)) {\n      differences.push({\n        path: [...path, nativeKey],\n        type: 'missing',\n        nativeValue,\n      });\n      continue;\n    }\n\n    const staticValue = staticObject[nativeKey];\n\n    const nativeValueIfObject = ifObject(nativeValue);\n    if (nativeValueIfObject != null) {\n      const staticValueIfObject = ifObject(staticValue);\n      if (staticValueIfObject != null) {\n        path.push(nativeKey);\n        accumulateDifferences(\n          differences,\n          path,\n          nativeValueIfObject,\n          staticValueIfObject,\n        );\n        path.pop();\n        continue;\n      }\n    }\n\n    if (nativeValue !== staticValue) {\n      differences.push({\n        path: [...path, nativeKey],\n        type: 'unequal',\n        nativeValue,\n        staticValue,\n      });\n    }\n  }\n\n  for (const staticKey in staticObject) {\n    if (!nativeObject.hasOwnProperty(staticKey)) {\n      differences.push({\n        path: [...path, staticKey],\n        type: 'unexpected',\n        staticValue: staticObject[staticKey],\n      });\n    }\n  }\n}\n\nfunction ifObject(value: mixed): ?{...} {\n  return typeof value === 'object' && !Array.isArray(value) ? value : null;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport ReactNativeViewViewConfig from '../Components/View/ReactNativeViewViewConfig';\nimport type {\n  PartialViewConfig,\n  ViewConfig,\n} from '../Renderer/shims/ReactNativeTypes';\n\n/**\n * Creates a complete `ViewConfig` from a `PartialViewConfig`.\n */\nexport function createViewConfig(\n  partialViewConfig: PartialViewConfig,\n): ViewConfig {\n  return {\n    uiViewClassName: partialViewConfig.uiViewClassName,\n    Commands: {},\n    bubblingEventTypes: composeIndexers(\n      ReactNativeViewViewConfig.bubblingEventTypes,\n      partialViewConfig.bubblingEventTypes,\n    ),\n    directEventTypes: composeIndexers(\n      ReactNativeViewViewConfig.directEventTypes,\n      partialViewConfig.directEventTypes,\n    ),\n    validAttributes: composeIndexers(\n      // $FlowFixMe[incompatible-call] `style` property confuses Flow.\n      ReactNativeViewViewConfig.validAttributes,\n      // $FlowFixMe[incompatible-call] `style` property confuses Flow.\n      partialViewConfig.validAttributes,\n    ),\n  };\n}\n\nfunction composeIndexers<T>(\n  maybeA: ?{+[string]: T},\n  maybeB: ?{+[string]: T},\n): {+[string]: T} {\n  return maybeA == null || maybeB == null\n    ? maybeA ?? maybeB ?? {}\n    : {...maybeA, ...maybeB};\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noformat\n * @flow strict-local\n * @generated SignedSource<<a81ed33269e71024fedad145e843fab0>>\n *\n * This file was sync'd from the facebook/react repository.\n */\n\n'use strict';\n\nimport {type ViewConfig} from './ReactNativeTypes';\nimport invariant from 'invariant';\n\n// Event configs\nconst customBubblingEventTypes: {\n  [eventName: string]: $ReadOnly<{|\n    phasedRegistrationNames: $ReadOnly<{|\n      captured: string,\n      bubbled: string,\n    |}>,\n  |}>,\n  ...,\n} = {};\nconst customDirectEventTypes: {\n  [eventName: string]: $ReadOnly<{|\n    registrationName: string,\n  |}>,\n  ...,\n} = {};\n\nexports.customBubblingEventTypes = customBubblingEventTypes;\nexports.customDirectEventTypes = customDirectEventTypes;\n\nconst viewConfigCallbacks = new Map();\nconst viewConfigs = new Map();\n\nfunction processEventTypes(viewConfig: ViewConfig): void {\n  const {bubblingEventTypes, directEventTypes} = viewConfig;\n\n  if (__DEV__) {\n    if (bubblingEventTypes != null && directEventTypes != null) {\n      for (const topLevelType in directEventTypes) {\n        invariant(\n          bubblingEventTypes[topLevelType] == null,\n          'Event cannot be both direct and bubbling: %s',\n          topLevelType,\n        );\n      }\n    }\n  }\n\n  if (bubblingEventTypes != null) {\n    for (const topLevelType in bubblingEventTypes) {\n      if (customBubblingEventTypes[topLevelType] == null) {\n        customBubblingEventTypes[topLevelType] =\n          bubblingEventTypes[topLevelType];\n      }\n    }\n  }\n\n  if (directEventTypes != null) {\n    for (const topLevelType in directEventTypes) {\n      if (customDirectEventTypes[topLevelType] == null) {\n        customDirectEventTypes[topLevelType] = directEventTypes[topLevelType];\n      }\n    }\n  }\n}\n\n/**\n * Registers a native view/component by name.\n * A callback is provided to load the view config from UIManager.\n * The callback is deferred until the view is actually rendered.\n */\nexports.register = function(name: string, callback: () => ViewConfig): string {\n  invariant(\n    !viewConfigCallbacks.has(name),\n    'Tried to register two views with the same name %s',\n    name,\n  );\n  invariant(\n    typeof callback === 'function',\n    'View config getter callback for component `%s` must be a function (received `%s`)',\n    name,\n    callback === null ? 'null' : typeof callback,\n  );\n  viewConfigCallbacks.set(name, callback);\n  return name;\n};\n\n/**\n * Retrieves a config for the specified view.\n * If this is the first time the view has been used,\n * This configuration will be lazy-loaded from UIManager.\n */\nexports.get = function(name: string): ViewConfig {\n  let viewConfig;\n  if (!viewConfigs.has(name)) {\n    const callback = viewConfigCallbacks.get(name);\n    if (typeof callback !== 'function') {\n      invariant(\n        false,\n        'View config getter callback for component `%s` must be a function (received `%s`).%s',\n        name,\n        callback === null ? 'null' : typeof callback,\n        typeof name[0] === 'string' && /[a-z]/.test(name[0])\n          ? ' Make sure to start component names with a capital letter.'\n          : '',\n      );\n    }\n    viewConfig = callback();\n    processEventTypes(viewConfig);\n    viewConfigs.set(name, viewConfig);\n\n    // Clear the callback after the config is set so that\n    // we don't mask any errors during registration.\n    viewConfigCallbacks.set(name, null);\n  } else {\n    viewConfig = viewConfigs.get(name);\n  }\n  invariant(viewConfig, 'View config not found for name %s', name);\n  return viewConfig;\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport {dispatchCommand} from '../../Libraries/Renderer/shims/ReactNative';\n\ntype Options<T = string> = $ReadOnly<{|\n  supportedCommands: $ReadOnlyArray<T>,\n|}>;\n\nfunction codegenNativeCommands<T: interface {}>(options: Options<$Keys<T>>): T {\n  const commandObj = {};\n\n  options.supportedCommands.forEach(command => {\n    commandObj[command] = (ref, ...args) => {\n      dispatchCommand(ref, command, args);\n    };\n  });\n\n  return ((commandObj: any): T);\n}\n\nexport default codegenNativeCommands;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport ReactNativeViewViewConfig from '../Components/View/ReactNativeViewViewConfig';\nimport {type ViewConfig} from '../Renderer/shims/ReactNativeTypes';\n\nconst IGNORED_KEYS = ['transform', 'hitSlop'];\n\n/**\n * The purpose of this function is to validate that the view config that\n * native exposes for a given view manager is the same as the view config\n * that is specified for that view manager in JS.\n *\n * In order to improve perf, we want to avoid calling into native to get\n * the view config when each view manager is used. To do this, we are moving\n * the configs to JS. In the future we will use these JS based view configs\n * to codegen the view manager on native to ensure they stay in sync without\n * this runtime check.\n *\n * If this function fails, that likely means a change was made to the native\n * view manager without updating the JS config as well. Ideally you can make\n * that direct change to the JS config. If you don't know what the differences\n * are, the best approach I've found is to create a view that prints\n * the return value of getNativeComponentAttributes, and then copying that\n * text and pasting it back into JS:\n * <Text selectable={true}>{JSON.stringify(getNativeComponentAttributes('RCTView'))}</Text>\n *\n * This is meant to be a stopgap until the time comes when we only have a\n * single source of truth. I wonder if this message will still be here two\n * years from now...\n */\nexport default function verifyComponentAttributeEquivalence(\n  nativeViewConfig: ViewConfig,\n  staticViewConfig: ViewConfig,\n) {\n  for (const prop of [\n    'validAttributes',\n    'bubblingEventTypes',\n    'directEventTypes',\n  ]) {\n    const diff = Object.keys(\n      lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]),\n    );\n\n    if (diff.length > 0) {\n      const name =\n        staticViewConfig.uiViewClassName ?? nativeViewConfig.uiViewClassName;\n      console.error(\n        `'${name}' has a view config that does not match native. ` +\n          `'${prop}' is missing: ${diff.join(', ')}`,\n      );\n    }\n  }\n}\n\n// Return the different key-value pairs of the right object, by iterating through the keys in the left object\n// Note it won't return a difference where a key is missing in the left but exists the right.\nexport function lefthandObjectDiff(leftObj: Object, rightObj: Object): Object {\n  const differentKeys = {};\n\n  function compare(leftItem: any, rightItem: any, key: string) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n\n    if (typeof leftItem === 'object') {\n      const objDiff = lefthandObjectDiff(leftItem, rightItem);\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n      return;\n    }\n\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n\n  for (const key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n\n  return differentKeys;\n}\n\nexport function getConfigWithoutViewProps(\n  viewConfig: ViewConfig,\n  propName: string,\n): {...} {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n\n  return Object.keys(viewConfig[propName])\n    .filter(prop => !ReactNativeViewViewConfig[propName][prop])\n    .reduce((obj, prop) => {\n      obj[prop] = viewConfig[propName][prop];\n      return obj;\n    }, {});\n}\n\nexport function stringifyViewConfig(viewConfig: any): string {\n  return JSON.stringify(\n    viewConfig,\n    (key, val) => {\n      if (typeof val === 'function') {\n        return `ƒ ${val.name}`;\n      }\n      return val;\n    },\n    2,\n  );\n}\n"],"names":["name","viewConfigProvider","getRuntimeConfig","invariant","UIManager","getViewManagerConfig","hasNativeViewConfig","get","FallbackNativeComponent","props","displayName","runtimeConfigProvider","_getRuntimeConfig2","native","StaticViewConfigValidator","_interopRequireWildcard","require","_ViewConfig","_UIManager","_interopRequireDefault","_ReactNativeViewConfigRegistry","_getNativeComponentAttributes","_verifyComponentAttributeEquivalence","_invariant","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","Map","ReactNativeViewConfigRegistry","register","_getRuntimeConfig","_ref","strict","verify","viewConfig","getNativeComponentAttributes","createViewConfig","nativeViewConfig","staticViewConfig","validationOutput","validate","type","console","error","stringifyValidationResult","verifyComponentAttributeEquivalence","validationResult","differences","concat","_toConsumableArray2","map","difference","path","join","nativeComponent","generatedPartialViewConfig","__INTERNAL_VIEW_CONFIG","componentName","accumulateDifferences","bubblingEventTypes","directEventTypes","uiViewClassName","validAttributes","length","nativeObject","staticObject","nativeKey","nativeValue","staticValue","nativeValueIfObject","ifObject","staticValueIfObject","push","pop","staticKey","value","Array","isArray","partialViewConfig","Commands","composeIndexers","ReactNativeViewViewConfig","_ReactNativeViewViewConfig","maybeA","maybeB","_extends2","customBubblingEventTypes","customDirectEventTypes","exports","viewConfigCallbacks","viewConfigs","callback","test","topLevelType","processEventTypes","_ReactNative","options","commandObj","supportedCommands","forEach","command","ref","_len","arguments","args","_key","dispatchCommand","_i","_arr","prop","diff","keys","lefthandObjectDiff","_staticViewConfig$uiV","propName","filter","reduce","obj","JSON","stringify","key","val","IGNORED_KEYS","leftObj","rightObj","differentKeys","compare","leftItem","rightItem","objDiff","includes"],"sourceRoot":""}